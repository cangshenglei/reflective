Set接口:
 *      接口的位置
 *          java.util
 *      接口的特点
 *          1.Set集合是不可以存储重复元素的集合
 *          2.Set集合中既有有序的集合,也有无序的集合
 *          3.Set集合是没有索引的集合
 *          4.Set集合没有特有的迭代器
 *          5.Set集合的遍历方式只有4种
 *              (1)迭代器
 *              (2)增强for
 *              (3)forEach()
 *              (4)Stream流
 *      接口的方法
 *          详见Collection集合常用方法


 HashSet类
  *      类的位置
  *          java.util
  *      类的特点
  *          1.HashSet集合底层其实就是一个HashMap实例
  *          2.HashSet集合是无序的集合
  *          3.HashSet集合无法保证元素的顺序在集合中永远不会改变
  *              元素的顺序和HashMap底层的数组长度有关,一旦长度发生改变,就有可能改变元素的顺序
  *          4.HashSet集合可以存储null元素,当获取元素时需要进行非空校验,防止空指针异常
  *          5.HashSet集合是线程不安全的,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全处理
  *      类的构造器
  *          public HashSet()
  *              构造一个新的空 set，其底层 HashMap 实例的默认初始容量是 16，加载因子是 0.75。
  *      类的方法
  *          详见Collection集合常用方法


 * HashSet集合过滤重复元素原理
 *      1.hashCode值不同当成不同的元素进行存储;如果hashCode值相同,元素内容有可能相同,也有可能不同
 *      2.进行内容的比较equals(),内容如果相同,直接过滤,如果不同直接进行存储
 *
 * 如果想保证元素的唯一性:
 *      1.重写Object类的hashCode()
 *      2.重写Object类的equals()
 *
 * 在重写hashCode()中,需要乘以一个数字31,为什么是31,而不是其它数字?
 *      1.该乘以数字不宜过大(容易超出int取值范围),也不宜过小(造成hashCode值重复概率过大)
 *      2.该乘以数字因数不宜过多(造成hashCode值重复概率过大),需要选择一个质数
 *      3.测试人员需要通过"泊松分布"计算出每个质数对应的hashCode值重复概率
 *      4.在测试结果中,有2个数字hashCode值重复概率是最小的,分别为29和31
 *      5.考虑到31可以改写为2^5-1,和整数类型取值范围格式类似,最终选择31



  * LinkedHashSet类
  *      类的位置
  *          java.util
  *      类的特点
  *          1.LinkedHashSet类是HashSet类的子类
  *          2.LinkedHashSet集合是有序的集合
  *          3.LinkedHashSet集合的底层其实是一个LinkedHashMap实例
  *          4.LinkedHashSet集合在底层比HashSet集合多封装了一个链表,用来保证元素的有序性
  *          5.LinkedHashSet集合可以存储null元素,当获取元素时需要进行非空校验,防止空指针异常
  *          6.LinkedHashSet集合是线程不安全的,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全处理
  *      类的构造器
  *          public LinkedHashSet()
  *              构造一个带默认初始容量 (16) 和加载因子 (0.75) 的新空链接哈希 set。
  *      类的方法
  *          详见Collection集合常用方法


  红黑树数据结构:
   *      红黑树结构是树形结构和二叉树结构中的一种,本质上也是一个类
   *
   * 树形结构结点对象:
   *      当前元素(泛型类型)
   *      父结点对象(树形结点类型)
   *      子左结点对象(树形结点类型)
   *      子右结点对象(树形结点类型)
   *
   * 树形结构特点(相比链表结构):
   *      1.整体上查询效率快,增删效率快
   *          注意:在一定的数据个数范围内,链表结构效率要比红黑树结构要快一点点
   *      2.树形结构在添加元素的时候针对结点中的元素数据进行数值排序
   *          如果比较的数值相同,JVM会默认为同一元素,只存储一个
   *
   * TreeSet类
   *      类的位置
   *          java.util
   *      类的特点
   *          1.TreeSet集合底层其实就是一个TreeMap实例
   *          2.TreeSet集合是无序的集合
   *          3.TreeSet集合在添加元素的时候,可以根据所选择的构造器针对待添加元素进行数据值大小排序
   *          4.TreeSet集合不可以存储null,在进行添加元素的时候需要进行非空校验,防止空指针异常
   *          5.TreeSet集合是线程不安全的,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全处理
   *      类的构造器
   *          public TreeSet()
   *              构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。
   *          public TreeSet(Comparator<? super E> comparator)
   *              构造一个新的空 TreeSet，它根据指定比较器进行排序
   *      类的方法
   *          详见Collection集合常用方法



   * TreeSet集合的排序特点:
    *      包装类型(Boolean类型除外):
    *          按照数据值的大小的升序排序
    *      String类型:
    *          每一位字符对应的Unicode码表值进行升序排序
    *      自定义类型Student:
    *          通过无参构造器实现的自然顺序
    *          通过有参构造器实现的定制顺序
    *
    * 注意事项:
    *      针对TreeSet集合存储自定义类型对象时,必须给其实现自然顺序或定制顺序,否则在添加对象时运行报错

自然顺序比较器:
 *      1.将集合中元素的类型实现Comparable接口
 *      2.在集合元素的类型中重写Comparable接口的抽象方法compareTo(T o)
 *      3.在重写方法时,需要确认比较的规则,使用规则进行减法计算


 定制顺序的比较器
  *      1.使用匿名内部类创建Comparator<T>接口的实现类对象
  *      2.确认比较规则,在匿名内部类中重写compare(Student o1, Student o2)
  *      3.将Comparator<T>接口的实现类对象作为实参,创建TreeSet集合对象
  *      4.添加元素即可完成排序
