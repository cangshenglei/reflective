 异常:
 *      在程序编译或运行的过程中,出现了非正常的情况,从而导致JVM终止


 Throwable类
  *      类的位置
  *          java.lang
  *      类的特点
  *          在程序中是所有Exception和Error的直接父类
  *          Exception:在程序编译或运行的过程中,出现了非正常的情况,从而导致JVM非法终止;这类问题是程序员可以通过代码进行修复的
  *          Error:在程序运行的过程中,出现了非正常的情况,从而导致JVM非法终止;这类问题是程序员无法通过代码进行修复的
  *      类的构造器
  *          public Throwable()
  *              构造一个将 null 作为其详细消息的新 throwable。
  *          public Throwable(String message)
  *              构造带指定详细消息的新 throwable。
  *      类的方法
  *          public void printStackTrace()
  *              将此 throwable 及其追踪输出至标准错误流。
  *          public String getMessage()
  *              返回此 throwable 的详细消息字符串。



  Exception的体系:
   *      编译时异常:
   *          含义:代码没有任何语法格式错误,导致程序编译报错
   *          位置:java.lang包下Exception类及其子类(RuntimeException类及其子类除外)
   *      运行时异常:
   *          含义:代码没有任何语法格式错误,编译正常,在运行时期程序报错
   *          位置:java.lang包下RuntimeException类及其子类




 * 异常处理:
 *      关键字:throw,throws,try,catch,finally
 *      注意事项:
 *          无论是编译时异常还是运行时异常,都必须进行处理
 *      处理方案:
 *          编译时异常:
 *              必须由程序员手动通过"异常声明"方式或"异常捕获"方式进行处理
 *          运行时异常:
 *              程序员可以选择不处理,交给JVM进行处理
 *                  第一步:调用异常对象的父类方法printStackTrace()
 *                  第二步:终止JVM
 *              程序员手动进行处理
 *                  1.异常声明
 *                  2.异常捕获
 *

 throw关键字:
  *      含义:抛出异常,将异常交给JVM进行识别
  *      格式:
  *          throw new 异常类名(实参);



  异常处理方案1:异常声明
   *      含义:
   *          当前方法不进行异常的处理,交给调用者方法进行处理
   *      格式:
   *          修饰符 返回类型 方法名 () throws 异常类名1,异常类名2,......,异常类名n {
   *
   *          }


   异常声明的注意事项:异常声明和面向对象中的"继承"有一定的关系
    *      在进行异常声明的时候出现了子父类继承关系
    *          声明的异常类存在子父类继承关系
    *              1.在进行异常声明的时候,异常子类和异常父类throws的顺序没有约束
    *              2.声明的多个异常类存在子父类继承关系,可以直接声明一个父类即可
    *          异常所在的类存在子父类继承关系
    *              异常在父类被重写的方法中
    *                  当子类重写的时候,可以无需理会该异常信息,直接进行重写即可
    *              异常在子类重写后的方法中
    *                  处理方案只有唯一的一种,就是"异常捕获"
    */

    异常处理方案2:异常捕获
     *      含义:
     *          找到可能发生异常的代码片段,进行捕获,如果存在异常,进行异常的处理,如果没有异常,执行后续代码
     *      格式:
     *          try {
     *              可能发生异常的代码判断
     *          } catch (异常类名 对象名) {
     *              捕获到该异常对象时,进行该异常的处理方案

     }



     异常捕获的注意事项:异常捕获和面向对象中的"继承"有一定的关系
      *      在进行异常捕获的时候出现了子父类继承关系
      *          捕获的异常类存在子父类继承关系
      *              可以分别捕获,分别处理
      *                  前提:遇到每个异常的处理方案是不同的,异常间是独立
      *              可以一起捕获,分别处理
      *                  前提:遇到每个异常的处理方案是不同的,异常间是关联
      *                  注意事项:异常子类需要先进行处理,否则出现编译报错
      *              可以一起捕获,一起处理
      *                  前提:遇到每个异常的处理方案是相同的,直接处理一次
      *          异常所在的类存在子父类继承关系
      *              异常在父类被重写的方法中
      *                  当子类重写的时候,可以无需理会该异常信息,直接进行重写即可
      *              异常在子类重写后的方法中
      *                  处理方案只有唯一的一种,就是"异常捕获"




      finally关键字:
       *      含义:
       *          必须执行的(代码)
       *      格式:
       *          try {
       *
       *          } catch () {
       *
       *          } finally {
       *              必须执行的代码
       *          }


   finally关键字的注意事项:
    *      在try,catch,finally里面避免使用return语句


     自定义异常类
     *      自定义编译时异常类
     *      自定义运行时异常类
     *
     * 自定义运行时异常类步骤
     *      1.创建自定义运行时异常类
     *      2.将该类继承RuntimeException类
     *      3.根据父类生成合适的构造器,至少有2个
     *          无参和String参数
     *
     * 自定义编译时异常类步骤:
     *      1.创建自定义编译时异常类
     *      2.将该类继承Exception类
     *      3.据父类生成合适的构造器,至少有2个
     *          无参和String参数



     System类
      *      类的位置
      *          java.lang
      *      类的特点
      *          常用方法的工具类
      *      类的构造器
      *          构造器私有化
      *      类的变量和方法
      *          public static final InputStream in
      *              “标准”输入流
      *          public static final PrintStream out
      *              “标准”输出流
      *          public static void gc()
      *              运行垃圾回收器。
      *          public static void setOut(PrintStream out)
      *              重新分配“标准”输出流。
      *          public static long currentTimeMillis()
      *              返回以毫秒为单位的当前时间。
      *          public static long nanoTime()
      *              返回最准确的可用系统计时器的当前值，以毫微秒为单位。