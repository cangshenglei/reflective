String类
 *      类的位置
 *          java.lang
 *      类的特点
 *          1.String类代表字符串
 *          2.所有的字符串字面值常量都是String对象,可以进行String实例方法的调用
 *          3.字符串是常量,一旦创建初始化不能改变
 *          4.String底层的数据结构是一个被final修饰的数组变量
 *          5.String底层数组的数据类型:
 *              在JDK8.0(包含)以前,数据类型为:char[]
 *              在JDK9.0(包含)以后,数据类型为:byte[]
 *          6.为什么在JDK9.0中将char[]修改为byte[]?
 *              时间复杂度:
 *                  如果是char[],里面的元素是char类型,在进行存储的时候,先将char类型转换为字节,再由字节转换成二进制
 *                  如果是byte[],里面的元素是byte类型,在进行存储的时候,直接byte类型转换为二进制
 *              空间复杂度
 *                  如果是char[],
 *                      字符串内容为"abc",将abc分为三个字符存储到数组中,字符元素变量由底层创建,遵循"内码"规则,
 *                          每个字符占2个字节,总共占6个字节
 *                      字符串内容为"尚硅谷",将"尚硅谷"分为三个字符存储到数组中,字符元素变量由底层创建,遵循"内码"规则,
 *                          每个字符占2个字节,总共占6个字节
 *                  如果是byte[],
 *                      字符串内容为"abc",根据平台默认的编码表进行存储,将字符串中的内容转换为字节,考虑到平台是"UTF8",
 *                          每个英文字符占用1个字节,总共占用3个字节
 *                      字符串内容为"尚硅谷",根据平台默认的编码表进行存储,将字符串中的内容转换为字节,考虑到平台是"UTF8",
 *                          每个中文字符占用3个字节,总共占用9个字节
 *          7.String对象为什么可以存储中文?
 *              String类底层是以"UTF-16"编码方式进行封装的,只要是Unicode字符集中的中文都可以支持
 *
 *      类的构造器
 *          public String()
 *              初始化一个新创建的 String 对象，使其表示一个空字符序列。
 *          public String(byte[] bytes)
 *              通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String
 *          public String(byte[] bytes,int offset,int length)
 *              通过使用平台的默认字符集解码指定的 byte 子数组，构造一个新的 String。
 *          public String(char[] value)
 *              分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。
 *          public String(char[] value,int offset,int count)
 *              分配一个新的 String，它包含取自字符数组参数一个子数组的字符。
 *          public String(String original)
 *              初始化一个新创建的 String 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。
 *          public String(StringBuffer buffer)
 *              分配一个新的字符串，它包含字符串缓冲区参数中当前包含的字符序列。
 *          public String(StringBuilder builder)
 *              分配一个新的字符串，它包含字符串生成器参数中当前包含的字符序列。
 *      类的方法
 *          判断功能方法
 *          获取功能方法
 *          转换功能方法
 *          分割功能方法
 *
 * String对象创建的两种方式:
 *      1.字符串字面值常量
 *      2.通过构造器



 String类的常用方法:判断
  *      public boolean equals (Object anObject)
  *          将此字符串与指定对象进行比较
  *      public boolean equalsIgnoreCase (String anotherString)
  *          将此字符串与指定对象进行比较，忽略大小写。
  *      public boolean contains(CharSequence s)
  *          当且仅当此字符串包含指定的 char 值序列时，返回 true。
  * 		public boolean endsWith(String suffix)
  * 	   	    测试此字符串是否以指定的后缀结束。
  * 		public boolean isEmpty()
  * 	   	    当且仅当 length() 为 0 时返回 true。
  * 		public boolean startsWith(String prefix)
  * 	    	测试此字符串是否以指定的前缀开始。
  * 	  	public boolean startsWith(String prefix,int toffset)
  * 	    	测试此字符串从指定索引开始的子字符串是否以指定前缀开始。



   String类常用方法:获取
   *      public int length ()
   *          返回此字符串的长度。
   *      public String concat (String str)
   *          将指定的字符串连接到该字符串的末尾。
   *      public char charAt (int index)
   *          返回指定索引处的 char值。
   *      public int indexOf (String str)
   *          返回指定子字符串第一次出现在该字符串内的索引。
   *      public int lastIndexOf(String str)
   *          返回指定子字符串在此字符串中最右边出现处的索引。
   *      public String substring (int beginIndex)
   *          返回一个子字符串，从beginIndex开始截取字符串到字符串结尾。
   *      public String substring (int beginIndex, int endIndex)
   *          返回一个子字符串，从beginIndex到endIndex截取字符串。含beginIndex，不含endIndex。

* String的常用方法:
 *      public char[] toCharArray ()
 *          将此字符串转换为新的字符数组
 *      public byte[] getBytes ()
 *          使用平台的默认字符集将该 String编码转换为新的字节数组。
 *      public String replace (CharSequence target, CharSequence replacement)
 *          将与target匹配的字符串使用replacement字符串替换。
 *      public String toLowerCase()
 *          使用默认语言环境的规则将此 String 中的所有字符都转换为小写。
 *      public String toUpperCase()
 *          使用默认语言环境的规则将此 String 中的所有字符都转换为大写。

  String类的常用方法:分割
  *      public String[] split(String regex)
  *          根据给定规则的匹配拆分此字符串。
  *
  * 注意事项:
  *      1.进行分割时候,分割后的字符串没有"给定规则"
  *      2.只要"给定规则"不在字符串的最后,都正常分割
  *      3.如果给定的规则在字符串的最后,删除最后的给定规则,不进行分割



  StringBuilder类和StringBuffer类
   *      相同点:
   *          1.拥有相同的父类AbstractStringBuilder
   *          2.都是可变的字符序列
   *      不同点:
   *          1.StringBuilder类是线程不安全,适合单线程程序,如果在多线程程序中进行上使用,需要手动添加线程安全
   *          2.StringBuffer类是线程安全,适合多线程程序,如果在单线程程序中进行使用,效率过低,不推荐在单线程中进行使用
   */


    StringBuilder类
    *      类的位置
    *          java.lang
    *      类的特点
    *          1.一个可变的字符序列
    *          2.StringBuilder类是线程不安全,适合单线程程序,如果在多线程程序中进行上使用,需要手动添加线程安全
    *      类的构造器
    *          public StringBuilder()
    *              构造一个不带任何字符的字符串生成器，其初始容量为 16 个字符。
    *      类的方法
    *          public StringBuilder append(String s)
    *              将 String 参数的字符串表示形式追加到序列。
    *          public StringBuilder insert(int offset,String str)
    *              将字符串插入此字符序列。
    *          public StringBuilder reverse()
    *              将此字符序列用其反转形式取代。


    StringBuilder类的源码分析:
     *      1.StringBuilder类底层数组的初始容量
     *          初始容量是多少取决于创建对象时选择的"构造器"
     *          (1)StringBuilder()
     *              初始容量:16
     *          (2)StringBuilder(CharSequence seq)
     *              初始容量:参数长度+16
     *          (3)StringBuilder(int capacity)
     *              初始容量:自定义
     *          (4)StringBuilder(String str)
     *              初始容量:参数长度+16
     *      2.StringBuilder类底层数组的扩容规则
     *          JDK8.0(包含)以后扩容规则:
     *              (原来数组长度 << 1) + 2;
     *          JDK7.0(包含)扩容规则:
     *              原来数组长度  * 2 + 2;
     *          JDK6.0(包含)以前扩容规则:
     *              (原来数组长度 + 1) * 2
     *      3.StringBuilder类底层数组进行扩容的时候,为什么加2?
     *          当使用带有int参数的构造器创建对象时,自定义长度为0,进行扩容不加2永远为0,需要通过+2进行扩容,访问底层数组为0的情况
     */