 线程安全问题
 *      1.出现了不存在的数据
 *      2.出现了重复数据



 线程安全的解决方案
  *      1.同步(synchronized)代码块
  *      2.同步方法
  *      3.Lock锁(暂不涉及)
  *
  * 同步代码块:
  *      格式:
  *          synchronized (同一资源对象) {
  *              可能出现线程安全问题的代码
  *          }
  *      解释:
  *          同一资源对象(要求每个线程是同一个对象):
  *              如果多条线程处理同一资源,且每条线程的处理动作完全相同,同一资源对象其实就是执行动作对象
  *              如果多条线程处理同一资源,且每条线程的处理动作完全不同,同一资源对象其实就是处理同一数据对象
  *              如果多条线程处理同一资源,且每条线程的处理动作涉及静态,同一资源对象其实就是当前类的字节码文件对象(Class类型)
  *      特点:
  *          当多条线程遇到同步代码块,需要多条线程抢夺同一资源对象,哪条线程抢夺到同一资源对象就会进入同步代码块,执行里面的内容;
  *          没有抢夺的同一资源对象的线程,在同步代码块外面进行等待进入线程释放同一资源对象进行抢夺
  *      位置:
  *          run()中


   同步方法:
   *      格式:
   *          修饰符 synchronized 返回类型 方法名 () {
   *              可能存在线程安全的代码
   *          }
   *
   *      特点:
   *          当多条线程遇到同步方法调用时,需要多条线程抢夺同步方法的调用权,因为同步方法在栈内存中不能出现第2块区域,哪条线程抢夺
   *          到同步方法的调用权,就会执行同步方法体中的代码;没有抢夺同步方法的调用权,在同步方法调用的外面进行等待当前同步方法出栈;
   *      位置:
   *          和run()在同一个类中
   *      前提条件:
   *          多条线程的执行动作相同