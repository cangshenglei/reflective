package TheTinth.demo17;

/**
 * @ClassName ExtendsDemo17
 * @Description 此类用于演示功能
 * @Author Shark
 * @DateTime 2022年02月25日 16时08分
 * @Version 1.0
 *
 * 抽象的由来:
 *      1.多个子类抽取出来的父类,理论上不应该被创建对象,但实际上可以创建
 *      2.通过父类重写后的方法被子类对象所调用,父类被重写方法的方法体显得就不是那么重要了,希望这个方法体可以不写提高开发效率,但是如果不写编译报错
 *      3.当子类重写父类的方法时,如果某个子类忘记重写,希望忘记重写时,idea最好编译报错进行提示,但是实际上没有任何提醒
 *
 * 抽象的出现就是为了解决上述继承关系中的三大问题
 *
 * 抽象分类:
 *      抽象类
 *      抽象方法
 *
 * 抽象类:
 *      含义:
 *          被abstract修饰的class,也叫做"加强版父类"
 *      格式:
 *          public abstract class 父类类名 {}
 *      特点:
 *          1.在程序中抽象类无法进行实例化对象
 *          2.在抽象类中可以含有构造器,构造器的作用不是创建父类对象,而是创建子类对象时初始化父类成员使用的
 *
 * 抽象方法:
 *      含义:
 *          被abstract修饰,且没有方法体的方法
 *      格式:
 *          修饰符 abstract 返回类型 方法名 ();
 *      特点:
 *          1.抽象类中可以没有抽象方法,但含有抽象方法的类一定是抽象类
 *          2.抽象类的子类必须重写抽象类中所有的抽象方法,除非该类也是抽象类
 */
public class ExtendsDemo17 {
	public static void main(String[] args) {
		Cat cat = new Cat();
	}
}
