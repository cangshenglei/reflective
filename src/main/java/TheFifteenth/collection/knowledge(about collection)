集合:
 *      存储同一数据类型多个元素对象的容器
 *
 * 数组和集合的区别:
 *      1.容器长度可变性:
 *          数组:一旦创建,长度不可改变
 *          集合:可以改变的
 *      2.容器元素的数据类型
 *          数组:元素既可以是基本类型,还可以是引用类型
 *          集合:元素只能是引用类型
 *      3.容器方法
 *          数组:没有特有方法,调用Object类中的方法
 *          集合:含有特有方法,也可以调用Object类中的方法
 */


 集合框架体系结构:
  *      单列集合(Collection接口):存储元素的单位是"个"
  *      双列集合(Map接口):存储元素的单位是"对"
  *
  * Collection接口:
  *      List接口:
  *          ArrayList类
  *          Vector类
  *          LinkedList类
  *      Set接口:
  *          HashSet类
  *          LinkedHashSet类
  *          TreeSet类
  *
  * Map接口
  *      HashMap类
  *      LinkedHashMap类
  *      TreeMap类
  *      Hashtable类
  *      Properties类




  Collection接口
   *      接口的位置
   *          java.util
   *      接口的特点
   *          是单列集合的顶级接口
   *      接口的方法
   *          boolean add(E e)
   *              确保此 collection 包含指定的元素（可选操作）。
   *          void clear()
   *              移除此 collection 中的所有元素（可选操作）。
   *          boolean contains(Object o)
   *              如果此 collection 包含指定的元素，则返回 true。
   *          boolean isEmpty()
   *              如果此 collection 不包含元素，则返回 true。
   *          Iterator<E> iterator()
   *              返回在此 collection 的元素上进行迭代的迭代器。
   *          boolean remove(Object o)
   *              从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。
   *          int size()
   *              返回此 collection 中的元素数。


   Collection集合的面试题:
    *      通过Collection接口的多态形式对象调用toString(),先判断Collection父接口中是否存在toString(),如果存在,
    *      调用ArrayList类中重写后的toString();如果没有,编译报错;通过查询源码,发生Collection接口及它的父接口中
    *      都没有toString(),根据多态的特点应该编译报错,但是实际上并没有编译报错,代码可以正常调用ArrayList类重写
    *      后的toString(),为什么?
    *          程序中所有的接口都隐式包含Object类中方法的抽象形式




    Collection集合第一种遍历方式:Iterator迭代器
     *
     * Iterator接口
     *      接口的位置
     *          java.util
     *      接口的特点
     *          针对Collection接口进行迭代的迭代器工具接口
     *      接口的方法
     *          boolean hasNext()
     *              如果仍有元素可以迭代，则返回 true
     *          E next()
     *              返回迭代的下一个元素。
     *          void remove()
     *              从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）。


     Iterator迭代器的注意事项:
      *      1.获取的迭代器对象只能针对集合遍历一次,如果想再次遍历,需要重新调用iterator()获取新的迭代器对象
      *      2.在使用迭代器针对集合迭代的过程中,不能针对集合做任何元素的修改,否则会发生ConcurrentModificationException(并发修改异常)
      */


       Collection集合第二种遍历方式:增强for(JDK5.0新特性)
       *      底层:增强for的底层就是迭代器对象
       *      格式:
       *          for (容器中元素的数据类型 元素名 : 容器名 ) {
       *
       *          }

       Collection集合第三种遍历方式:forEach()
       Collection集合第四种遍历方式:Stream流




       泛型:
        *      含义:
        *          未知的数据类型(类似于小学数学中"设某个量为x")
        *      前提条件:
        *          如果需要使用泛型,需要进行声明
        *      格式:
        *          <未知类型>
        *      注意事项:
        *          如果使用含有泛型的类,接口,方法,必须给其确认泛型,如果不进行确认,JVM自动帮助我们进行确认为Object类型
        *


        泛型的高级应用:通配符
         *      格式:
         *          优化前:
         *              修饰符 <泛型>返回类型 方法名 (类名或接口<泛型> 对象名) {}
         *          优化后:
         *              修饰符 返回类型 方法名 (类名或接口<?> 对象名) {}


         通配符的上限和下限
          *      泛型的上限:
          *          格式:
          *              <? extends 数据类型>
          *          特点:
          *              泛型的类型是该类型本身,也可以是该类型的子类类型
          *      泛型的下限:
          *          格式:
          *              <? super 数据类型>
          *          特点:
          *              泛型的类型是该类型本身,也可以是该类型的父类类型