List接口
 *      接口的位置
 *          java.util
 *      接口的特点
 *          1.List集合是有序的集合
 *              集合的有序性:存储元素的顺序和获取元素的顺序一致
 *              集合的无序性:存储元素的顺序和获取元素的数据不一致
 *          2.List集合是有整数索引的集合
 *          3.List集合是可以存储重复元素
 *          4.List集合中的索引实现方式共有4种
 *              数组结构
 *              链表结构
 *              栈结构
 *              队列结构
 *          5.List集合含有特有的迭代器ListIterator
 *      接口的方法
 *          void add(int index,E element)
 *              在列表的指定位置插入指定元素（可选操作）。
 *          E get(int index)
 *              返回列表中指定位置的元素。
 *          int indexOf(Object o)
 *              返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。
 *          int lastIndexOf(Object o)
 *              返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。
 *          ListIterator<E> listIterator()
 *              返回此列表元素的列表迭代器（按适当顺序）。
 *          E remove(int index)
 *              移除列表中指定位置的元素（可选操作）。将所有的后续元素向左移动（将其索引减 1）。
 *          E set(int index,E element)
 *              用指定元素替换列表中指定位置的元素（可选操作）。
 *          List<E> subList(int fromIndex,int toIndex)
 *              返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。
 */


  List集合的6种遍历方式:
  *      1.迭代器
  *      2.增强for
  *      3.forEach()
  *      4.Stream流
  *      5.特有迭代器
  *      6.普通for



   集合删除时的小问题:每次成功删除,集合的长度都会改变
   *
   * 解决方案:
   *      1.每次成功删除,将索引往前移动一位
   *      2.倒序遍历进行删除
   *      3.迭代器中remove()




   ArrayList类
    *      类的位置
    *          java.util
    *      类的特点
    *          1.ArrayList集合底层的数据结构是"数组结构"
    *              数组结构的特点(相比链表结构):
    *                  查询效率高,增删效率低
    *          2.ArrayList集合可以存储null元素,在获取元素的时候需要进行元素的非空校验,防止空指针异常
    *          3.ArrayList集合是线程不安全的集合,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全
    *      类的构造器
    *          public ArrayList()
    *              构造一个初始容量为 10 的空列表。
    *      类的方法
    *          详见Collection集合和List集合的常用方法




    ArrayList集合的源码分析:
     *      1.ArrayList集合底层数组的初始长度
     *          初始长度是多少所选择的构造器
     *          (1)public ArrayList()
     *              初始容量:
     *                  JDK6.0(包含)以前:10
     *                  JDK7.0(包含)以后:0
     *          (2)public ArrayList(Collection<? extends E> c)
     *              初始容量:
     *                  参数集合长度
     *          (3)public ArrayList(int initialCapacity)
     *              初始容量:
     *                  自定义
     *      2.ArrayList集合底层数组的扩容原理
     *          JDK6.0(包含)以前:
     *              (原来数组长度 * 3) / 2 + 1
     *          JDK7.0(包含)以后:
     *              第一次扩容:
     *                  10
     *              后续扩容:
     *                  原来数组长度 + (原来数组长度 >> 1);



     Vector类
      *      类的位置
      *          java.util
      *      类的特点
      *          1.Vector集合底层的数据结构是"数组结构"
      *          2.Vector集合可以存储null元素,在获取元素的时候需要进行元素的非空校验,防止空指针异常
      *          3.Vector集合是线程安全的,适用于多线程程序,不推荐在单线程中进行使用,因为效果过低
      *      类的构造器
      *          public Vector()
      *      类的方法
      *          详见Collection集合和List集合的常用方法



      ArrayList集合和Vector集合的区别:
       *      1.线程安全性:
       *          ArrayList集合是线程不安全的集合,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全
       *          Vector集合是线程安全的,适用于多线程程序,不推荐在单线程中进行使用,因为效果过低
       *      2.无参构造器的初始长度不同:
       *          ArrayList初始容量:
       *              JDK6.0(包含)以前:10
       *              JDK7.0(包含)以后:0
       *          Vector初始容量:
       *              10
       *      3.扩容机制不同:
       *          ArrayList:
       *              根据计算公式进行扩容:
       *                  JDK6.0(包含)以前:
       *                      (原来数组长度 * 3) / 2 + 1
       *                  JDK7.0(包含)以后:
       *                      第一次扩容:
       *                          10
       *                      后续扩容:
       *                          原来数组长度 + (原来数组长度 >> 1);
       *          Vector:
       *              根据增量变量进行扩容
       *                  当增量为0时(无参构造器,int参数构造器,Collection参数构造器)
       *                      原来数组长度 + 原来数组长度
       *                  当增强大于0时(两个int参数构造器)
       *                      原来数组长度 + 增量变量
       */