Java语言本身就是一门多线程语言:
 *      除了程序员自定义线程外,还存在两条线程:main线程,垃圾回收器
 *
 * 并发和并行:
 *      并发:在同一段时间内执行的多件事情
 *      并行:在同一时间执行的多件事情
 *
 * 进程和线程:
 *      计算机中CPU核心执行规律:
 *          在多个应用程序间做的高速无规则的运动
 *      进程:是"应用程序"的执行单元,每个应用程序至少包含一条进程,由CPU中的核心进行控制
 *      线程:是"进程"的执行单元,每个进程至少包含一条线程,由CPU核心中的线程进行控制



 Thread类
  *      类的位置
  *          java.lang
  *      类的特点
  *          针对线程开启和操作的工具类
  *      类的构造器
  *          public Thread()
  *              分配新的 Thread 对象。
  *          public Thread(String name)
  *              分配新的 Thread 对象。
  *          public Thread(Runnable target)
  *              分配新的 Thread 对象
  *          public Thread(Runnable target,String name)
  *              分配新的 Thread 对象。
  *      类的方法
  *          public static Thread currentThread()
  *              返回对当前正在执行的线程对象的引用。
  *          public final String getName()
  *              返回该线程的名称。
  *          public static void sleep(long millis)
  *              在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响
  *          public void start()
  *              使该线程开始执行；Java 虚拟机调用该线程的 run 方法。
  *          public void run()
  *              如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；
  *              否则，该方法不执行任何操作并返回。 Thread 的子类应该重写该方法。
  */

  线程开启方式:
   *      1.创建Thread类的子类对象方式
   *      2.通过Runnable实现类对象作为参数创建Thread对象的方式
   *      3.通过Callable实现类对象作为参数创建Thread对象的方式(暂不涉及)
   *      4.开启固定数量的线程池方式(暂不涉及)
   *
   *
   * 线程开启方式1:继承Thread类
   *      1.创建Thread类的子类
   *      2.根据Thread类生成合适的构造器
   *      3.在Thread类的子类中重写父类的run(),run()中的代码就是开启线程的执行动作
   *      4.需要多少条线程,创建多少个Thread类的子类对象
   *      5.开启线程



    第一开启方式的弊端:
    *      存在单继承的局限性
    *
    * 第二种开启方式:实现Runnable接口
    *      1.创建Runnable接口的实现类
    *      2.在实现类中重写Runnable接口的run(),run()就是线程的执行动作
    *      3.在测试类中创建Runable接口的实现类对象
    *      4.以Runnable实现类对象为参数,需要多少条线程就创建多少个Thread对象
    *      5.开启线程
    *
    * 第二种方式的好处:
    *      1.避免单继承的局限性
    *      2.当忘记重写run()编译报错提示