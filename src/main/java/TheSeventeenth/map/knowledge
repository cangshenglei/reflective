HashMap类
 *      类的位置
 *          java.util
 *      类的特点
 *          1.HashMap集合底层的数据结构是"哈希表结构"
 *              JDK7.0(包含)以前:
 *                  哈希表:存储链表对象的数组
 *              JDK8.0(包含)以后:
 *                  哈希表:存储链表对象或红黑树对象的数组
 *          2.HashMap集合可以存储null键和null值,获取键和值的时候需要进行非空校验,防止空指针异常
 *          3.HashMap集合是无序的集合
 *          4.HashMap集合无法保证元素的顺序在底层数组中永远不会改变
 *              元素的存储位置和底层数组的长度有关,一旦底层数组长度改变,元素的存储位置就有可能发生变化
 *          5.HashMap集合是线程不安全的,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全
 *      类的构造器
 *          public HashMap()
 *              构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。
 *      类的方法
 *          详见Map集合的常用方法

 HashMap集合存储元素过程的源码分析(基于JDK8.0源码)
  *      1.名词解释
  *          桶:HashMap集合底层数组中存储的元素
  *              桶的内容可能:null,链表对象,红黑树对象
  *          初始容量:HashMap集合底层数组的初始长度
  *          加载因子:HashMap集合底层数组在进行自动扩容前的临界值参数
  *          扩容前标准:HashMap集合底层数组在进行自动扩容前的临界值
  *              扩容前标准 = 底层数组长度 * 加载因子
  *          树化:HashMap集合底层数组中的链表对象转换成红黑树对象
  *          链表化:HashMap集合底层数组中的红黑树对象转换成链表对象
  *      2.HashMap集合中成员变量,常量,局部变量的解释
  *          成员变量(常量)
  *              serialVersionUID(int):
  *                  针对HashMap类的ID编号
  *              DEFAULT_INITIAL_CAPACITY(int):
  *                  默认初始化长度参数标准
  *              MAXIMUM_CAPACITY(int):
  *                  最大长度参数标准
  *              DEFAULT_LOAD_FACTOR(float):
  *                  默认加载因子标准
  *              TREEIFY_THRESHOLD(int):
  *                  链表树化长度参数标准
  *              UNTREEIFY_THRESHOLD(int):
  *                  链表化参数标准
  *              MIN_TREEIFY_CAPACITY(int):
  *                  树化最小长度参数标准
  *              table(Node<K,V>[]):
  *                  底层存储链表对象和红黑树对象的数组
  *              entrySet(Set<Map.Entry<K,V>>):
  *                  底层存储键值对对象的集合
  *              size(int):
  *                  HashMap集合长度变量
  *              modCount(int)
  *                  HashMap集合元素的计数器变量
  *              threshold(int):
  *                  HashMap集合底层数组扩容前标准变量
  *              loadFactor(int):
  *                  HashMap集合底层数组扩容器加载因子参数变量
  *          hash():
  *              h(int):哈希码值变量
  *          putVal():
  *               tab(Node<K,V>[]):
  *                  待操作数组
  *               p(Node<K,V>):
  *                  待添加元素待存储索引位置上的桶元素
  *               n(int):
  *                  待操作数组的长度
  *               i(int):
  *                  待添加元素在待存储的索引位置
  *               e(Node<K,V>)
  *                  待添加元素待存储索引位置上链表对象下一个链表对象
  *
  *          resize():
  *              oldTab(Node<K,V>[]):
  *                  操作前的底层数组
  *              oldCap(int):
  *                  操作前的底层数组的长度
  *              oldThr(int):
  *                  操作前底层数组的扩容前标准
  *              newCap(int):
  *                  待操作后的底层数组的长度
  *              newThr(int):
  *                  待操作后底层数组的扩容前标准
  *      3.HashMap集合底层数组的初始容量和初始加载因子
  *          底层数组的初始容器和初始加载因子是多少取决于所选择的构造器
  *          (1)HashMap()
  *              初始容量:底层数组并没有初始化
  *              初始加载因子:0.75
  *          (2)HashMap(int initialCapacity)
  *              初始容量:自定义
  *              初始加载因子:0.75
  *          (3)HashMap(int initialCapacity, float loadFactor)
  *              初始容量:自定义
  *              初始加载因子:自定义
  *          (4)HashMap(Map<? extends K,? extends V> m)
  *              初始容量:参数集合的长度
  *              初始加载因子:0.75
  *      4.HashMap集合如何确认元素在底层数组中的索引位置
  *          (1)根据key的hashCode值,计算hash值
  *              代码:(h = key.hashCode()) ^ (h >>> 16)
  *              解析:将hashCode的高16位不变,组成新的hash值的高16位,hash值的低16位由hashCode高16位与hashCode低16进行按位异或的结果组成
  *              目的:进一步将存储的元素均匀打散到数组中的每个索引位置上
  *          (2)将hash值和底层数组长度-1的值进行按位与
  *              代码:(n - 1) & hash
  *      5.HashMap集合使用无参构造器时底层数组的扩容原理
  *          (1)第一次添加元素扩容:
  *              16
  *          (2)后续扩容:
  *              原来底层数组 << 1
  *      6.HashMap集合底层数组中链表对象进行树化的标准和红黑树对象进行链表化的标准
  *          树化标准:
  *              (1)当前链表对象长度达到8
  *              (2)底层数组长度达到64
  *          链表化标准:
  *              当前红黑树对象剩余6个
  *      7.HashMap集合JDK7.0(包含)以前和JDK8.0(包含)以后的区别
  *          (1)无参构造器的初始容量
  *              JDK7.0(包含)以前:
  *                  16
  *              JDK8.0(包含)以后:
  *                  底层数组并没有初始化
  *          (2)使用无参构造器创建的对象扩容原理不同
  *              JDK7.0(包含)以前:
  *                  2 * 底层数组长度
  *              JDK8.0(包含)以后:
  *                  (1)第一次添加元素扩容:
  *                      16
  *                  (2)后续扩容:
  *                      原来底层数组 << 1
  *          (3)HashMap集合底层数组的数据类型不同:
  *              JDK7.0(包含)以前:
  *                  Entry<K,V>[]
  *              JDK8.0(包含)以后:
  *                  Node<K,V>[]
  *          (4)HashMap集合底层数据结构不同:
  *              JDK7.0(包含)以前:
  *                  存储链表对象的数组
  *              JDK8.0(包含)以后:
  *                  存储链表对象或红黑树对象的数组
  *          (5)HashMap集合底层hash算法不同:
  *              JDK7.0(包含)以前:
  *                  h ^= k.hashCode();
  *                  h ^= (h >>> 20) ^ (h >>> 12);
  * 		            h ^ (h >>> 7) ^ (h >>> 4);
  *              JDK8.0(包含)以后:
  *                  (h = key.hashCode()) ^ (h >>> 16)

  LinkedHashMap类
   *      类的位置
   *          java.util
   *      类的特点
   *          1.LinkedHashMap类是HashMap类的子类
   *          2.LinkedHashMap类底层的数据结构是哈希表+链表
   *          3.LinkedHashMap集合是有序的集合,因为底层的链表结构维护了key的有序性
   *          4.LinkedHashMap集合可以存储null键和null值,获取键和值的时候,需要使用非空校验,防止空指针异常
   *          5.LinkedHashMap是线程不安全,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全
   *      类的构造器
   *          public LinkedHashMap()
   *              构造一个带默认初始容量 (16) 和加载因子 (0.75) 的空插入顺序 LinkedHashMap 实例。
   *      类的方法
   *          详见Map集合的常用方法


   TreeMap类
    *      类的位置
    *          java.util
    *      类的特点
    *          1.TreeMap集合的底层数据结构是"红黑树结构"
    *          2.TreeMap集合可以根据所选的构造器针对元素的key进行自然排序或定制排序
    *          3.TreeMap集合不可以存储null键,为了防止空指针异常,需要在添加元素的时候针对key进行非空校验
    *          4.TreeMap集合可以存储null值,在获取元素的时候,需要进行非空校验防止空指针异常
    *          5.TreeMap集合是线程不安全,适用于单线程程序,如果在多线程中进行使用,需要手动添加线程安全
    *      类的构造器
    *          public TreeMap()
    *              使用键的自然顺序构造一个新的、空的树映射。
    *          public TreeMap(Comparator<? super K> comparator)
    *              构造一个新的、空的树映射，该映射根据给定比较器进行排序
    *      类的方法
    *          详见Map集合的常见方法


 HashMap类和Hashtable类的区别:
 *      1.存储null元素不同
 *          HashMap类:可以存储null键和null值
 *          Hashtable类:不可以存储null键和null值
 *      2.线程安全性不同:
 *          HashMap类:线程不安全的
 *          Hashtable类:线程安全的
 *      3.底层哈希表结构不同:
 *          HashMap类:
 *              JDK7.0(包含)以前:
 *                  哈希表:存储链表对象的数组
 *              JDK8.0(包含)以后:
 *                  哈希表:存储链表对象或红黑树对象的数组
 *         Hashtable类
 *              存储链表对象的数组
 *      4.无参构造器底层数组的初始容量不同:
 *          HashMap类:
 *              JDK7.0(包含)以前:
 *                  16
 *              JDK8.0(包含)以后:
 *                  底层数组并没有初始化
 *          Hashtable类:
 *              11
 *      5.扩容规则不同:
 *          HashMap类:
 *              JDK7.0(包含)以前:
 *                  2 * 底层数组长度
 *              JDK8.0(包含)以后:
 *                  (1)第一次添加元素扩容:
 *                      16
 *                  (2)后续扩容:
 *                      原来底层数组 << 1
 *          Hashtable类:
 *              JDK6.0(包含)以前:
 *                  原来数组长度 * 2 + 1;
 *              JDK7.0(包含)以后:
 *                  (原来数组长度 << 1) + 1;
 *
